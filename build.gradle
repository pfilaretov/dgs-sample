plugins {
    id 'org.springframework.boot' version '2.5.2'
    id 'io.spring.dependency-management' version '1.0.11.RELEASE'
    id 'java'
    id "com.netflix.dgs.codegen" version "5.0.2"
}

group = 'pro.filaretov.spring.dgs'
version = '1.0.0-SNAPSHOT'
sourceCompatibility = '11'

repositories {
    mavenCentral()
}

dependencies {
    // Spring boot
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'

    // DGS Framework
    implementation(platform('com.netflix.graphql.dgs:graphql-dgs-platform-dependencies:latest.release'))
    implementation 'com.netflix.graphql.dgs:graphql-dgs-spring-boot-starter'

    // Database
    runtimeOnly 'com.h2database:h2'

    // Other
    compileOnly 'org.projectlombok:lombok:1.18.20'
    annotationProcessor 'org.projectlombok:lombok:1.18.20'

    implementation 'org.mapstruct:mapstruct:1.4.2.Final'
    annotationProcessor 'org.mapstruct:mapstruct-processor:1.4.2.Final'

    // Test
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testCompileOnly 'org.projectlombok:lombok:1.18.20'
    testAnnotationProcessor 'org.projectlombok:lombok:1.18.20'
}

test {
    useJUnitPlatform()
}

generateJava {
    schemaPaths = ["${projectDir}/src/main/resources/schema"] // List of directories containing schema files
    packageName = 'pro.filaretov.spring.dgs' // The package name to use to generate sources
    generateClient = false // Enable generating the type safe query API
}